<% layout( 'm_layout' ) -%>

<div class="jumbotron">
	<div class="container">
  	<h2>Forced Layout Graph der Studieng채nge</h2>
  </div>
</div>

<style>

.links line {
  stroke: #ddd;
  stroke-opacity: 0.4;
}

.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

.node:hover circle {
  fill: #fff;
  stroke: blue;
}

.node:hover text {
  display: inline;
  z-index:1000;
}


.node text {
  display: none;
}

</style>
<div class="container">
	<div class="mark">
Im folgenden *Forced Layout Graphen* sind die Module als Punkte angeordnet und je nach Hochschule farblich gekennzeichnet. Je n채her zwei Module nebeneinander stehen, desto mehr 체bereinstimmende Schl체sworte haben sie.
	</div>

<svg width="800" height="450"></svg>
</div>

<script>


var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var color = d3.scaleOrdinal(d3.schemeCategory20);

var manyBody = d3  // see https://github.com/d3/d3-force
	.forceManyBody()
	.strength(-80)
	.distanceMax(100)
	.distanceMin(50)
	.theta(4);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", manyBody)
    .force("center", d3.forceCenter(width / 2, height / 2));

d3.json("/analysis/json/courses", function(error, graph) { 

		var link = svg.append("g")
			.attr("class", "links")
		.selectAll("line")
		.data(graph.links)
		.enter().append("line")
			.attr("class", "link")
			.attr("source", function(d){ return d.source; })
			.attr("target", function(d){ return d.target; })
			.attr("stroke-width", function(d) { return Math.sqrt(d.value); });


	


		var node = svg.append("g")
			.attr("class", "nodes")
		.selectAll("circle")
		.data(graph.nodes)
		.enter().append("g")
			.attr("class", "node")
				.append("circle")
					.attr("r", 5)
					.attr("id", function(d) { return d.id })
					.attr("fill", function(d) { return color(d.group); })
					.on("mouseover", fadeAll(.4,"red"))
					.call(d3.drag()
							.on("start", dragstarted)
							.on("drag", dragged)
							.on("end", dragended));

		var label = d3.selectAll('.node')
				.append("text")
					.attr("dy", ".35em")
					.attr("id", function(d) { return 'node'+d.id })
					.text(function(d){ return d.title; })
	
		
		
		simulation
			.nodes(graph.nodes)
			.on("tick", ticked);

		simulation.force("link")
			.links(graph.links);

		function ticked() {
			link
					.attr("x1", function(d) { return d.source.x; })
					.attr("y1", function(d) { return d.source.y; })
					.attr("x2", function(d) { return d.target.x; })
					.attr("y2", function(d) { return d.target.y; });

			node
					.attr("cx", function(d) { return d.x; })
					.attr("cy", function(d) { return d.y; });
			
			label
					.attr("x", function(d) { return d.x+8; })
					.attr("y", function(d) { return d.y; });		
						
		}

	
		var legend = svg.selectAll(".legend")
			.data(color.domain())
		.enter().append("g")
			.attr("class", "legend")
			.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

		legend.append("rect")
			.attr("x", width - 18)
			.attr("width", 18)
			.attr("height", 18)
			.style("fill", color);

		legend.append("text")
			.attr("x", width - 24)
			.attr("y", 9)
			.attr("dy", ".35em")
			.style("text-anchor", "end")
			.text(function(d) { 
				if(d==="TUD"){ return "TUD/Fak.Umweltwissenschaften"}
				return d; 
			});  


		function dragstarted(d) { console.log(JSON.stringify(d))
			
			if (!d3.event.active) simulation.alphaTarget(0.3).restart();
				d.fx = d.x;
				d.fy = d.y;
			}

		function dragged(d) {
			d.fx = d3.event.x;
			d.fy = d3.event.y;
		}

		function dragended(d) {
			if (!d3.event.active) simulation.alphaTarget(0);
			d.fx = null;
			d.fy = null;
		}
		
		
		function fadeAll(opacity,color) { 
			return function(ds) { 
				var selected = Number(d3.select(this).attr('id')); 
				link
					.style("stroke-opacity", function(o) { 
						if(o.source.id === selected){
							//var t = d3.select( 'text#node'+o.target.id ).style('display', 'inline');
							//var t = d3.select( 'text#node'+o.source.id ).style('display', 'none');
							return .6;
						}else if( o.target.id === selected){
						 	//var t = d3.select( 'text#node'+o.source.id ).style('display', 'inline');
						 	//var t = d3.select( 'text#node'+o.target.id ).style('display', 'none');
						 	return .6;
						}else{ 
							//var t = d3.select( 'text#node'+o.source.id ).style('display', 'none');
							//var t = d3.select( 'text#node'+o.target.id ).style('display', 'none');
							return 0.1;
						}	
					})   
					.style("stroke", function(o) {
						return o.source.id === selected || o.target.id === selected ? "lightblue" : "#ddd" ;
					})
					;
			}
		}
});

	




</script>
