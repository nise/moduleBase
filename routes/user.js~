

var 
	passport = require('passport'), 
	flash = require('connect-flash'),
	database = require('../routes/wines.js'),
	LocalStrategy = require('passport-local').Strategy,


//
exports.showAccountDetails = function(req, res){
  res.render('account', { user: req.user });
};

exports.openLoginPage = function(req, res){
  res.render('login', { user: req.user, message: req.flash('error') });
};

exports.handleLogout = function(req, res){
  req.logout();
  res.redirect('/login');
}; 

/* Check wether a user is logged in or not. If logged in give out the username. If not redirect to the login page. **/
exports.loggedIn = function loggedIn(req, res, next) {  
  if (req.user != undefined) {
    res.type('application/json');
    findVideoByGroup(req.user.groups[0], function(video){
    	console.log('........................'+video) 
    	res.jsonp({username: req.user.username, id: req.user.id, videoid: video});
   	});
  }else {
    res.type('application/json');
    res.jsonp({hello:'you are not logged in'});
    res.redirect('/login');
  }
};  


// Passport session setup.
//   To support persistent login sessions, Passport needs to be able to
//   serialize users into and deserialize users out of the session.  Typically,
//   this will be as simple as storing the user ID when serializing, and finding
//   the user by ID when deserializing.
passport.serializeUser(function(user, done) {
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  findById(id, function (err, user) {
    done(err, user);
  });
});


// Use the LocalStrategy within Passport.
//   Strategies in passport require a `verify` function, which accept
//   credentials (in this case, a username and password), and invoke a callback
//   with a user object.  In the real world, this would query a database;
//   however, in this example we are using a baked-in set of users.
passport.use(new LocalStrategy(
  function(username, password, done) {
    // asynchronous verification, for effect...
    process.nextTick(function () {
      
      // Find the user by username.  If there is no user with the given
      // username, or the password is not correct, set the user to `false` to
      // indicate failure and set a flash message.  Otherwise, return the
      // authenticated `user`.
      findByUsername(username, function(err, user) {
        if (err) { return done(err); }
        if (!user) {  return done(null, false, { message: 'Unknown user ' + username }); }
        if (user.password != password) { return done(null, false, { message: 'Invalid password' }); }
        return done(null, user);
      })
    });
  }
));






// Simple route middleware to ensure user is authenticated.
//   Use this route middleware on any resource that needs to be protected.  If
//   the request is authenticated (typically via a persistent login session),
//   the request will proceed.  Otherwise, the user will be redirected to the
//   login page.
exports.ensureAuthenticated = function(req, res, next) {
  if (req.isAuthenticated()) { return next(); }
  	res.redirect('/login')
}
